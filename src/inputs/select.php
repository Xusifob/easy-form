<?php

/**
 * Class EF_Input
 */
class EF_Select extends EF_Input
{

    /**
     * @var string
     */
    public static $_TYPE = 'select';

    /**
     * @var string
     */
    protected $element = 'select';


    /**
     * @since 1.0.0
     *
     * Array containing all options of the select
     *
     * @var array
     */
    protected $options = [];


    public function __construct($id = null, array $attributes = [], array $settings = [], array $data = [])
    {
        parent::__construct($id, $attributes, $settings, $data);

        $this->setOptions($this->getSetting('options'));

    }


    /**
     * @return array
     */
    public function getOptions()
    {
        return $this->options;
    }


    /**
     * @param string $options_string
     * @return $this
     */
    public function setOptions($options_string)
    {

        $options = explode("\n",trim($options_string));

        $opts = array();


        // Go over all options
        foreach ($options as $option) {

            // Remove empty ones
            if(empty(trim($option))) {
                continue;
            }

            $opt = array();

            // Set option selected
            if(strpos($option,'*') !== false) {
                $option = str_replace('*','',$option);
                $opt['selected'] = true;
            }


            // If different key => value, separate them
            if(strpos($option,':') !== false) {
                $option = explode(':',$option);

                $opt['value'] = trim($option[0]);
                $opt['content'] = trim($option[1]);
            }else {
                $opt['value'] = trim($option);
                $opt['content'] = trim($option);
            }


            $opts[] = $opt;
        }

        // If we allow other, then we display the other
        if($this->getSetting('allow-other')) {
            $opts[] = array('value' => 'ef-other','content' => '',);
        }


        $this->options = $opts;

        return $this;

    }


    /**
     * @param $option
     * @return $this
     */
    public function addOption($option)
    {
        $this->options[] = $option;
        return $this;
    }



    /**
     * @return string
     * @throws Exception
     */
    public function getInput()
    {

        $this->removeAttribute('type');

        $template =  $this->open() . $this->displayOptions() .   $this->close();

        if($this->getSetting('label-after') == true){
            return $template . $this->getLabel();
        }else{
            return $this->getLabel() . $template;
        }
    }


    /**
     *
     * Add the value inside the element
     *
     * @param $data
     */
    public function fillValue($data)
    {

        parent::fillValue($data); // TODO: Change the autogenerated stub


        $value = $this->getValue();

        $found = false;
        $other_key = null;

        if(!$value) {
            return;
        }


        if(empty($this->options)) {
            return;
        }

        foreach($this->options as $key => &$option) {

            if(is_array($value)) {
                $index = array_search($option['value'],$value);

                if(false !== $index) {
                    $option['selected'] = true;
                    $found = true;
                    array_splice($value,$index,1);
                }else {
                    unset($option['selected']);
                }


            }else if($value === $option['value']) {
                $option['selected'] = true;
                $found = true;
            } else {
                unset($option['selected']);
            }

            if($option['value'] == 'ef-other') {
                $other_key = $key;
            }

        }


        if($other_key && (!$found || $this->getAttribute('multiple'))) {


            if(is_array($value) && isset($value[0])) {
                $value = $value[0];
            }
            $this->options[$other_key]['content'] = $value;
            $this->options[$other_key]['selected'] = true;
        }

    }


    /**
     * @since 1.0.0
     *
     * Display all options of the select
     *
     */
    protected function displayOptions()
    {

        $options = '';

        if(is_array($this->getOptions())){
            foreach($this->getOptions() as $option){
                $opt = new EF_Html_Element($option);
                $opt->setElement('option');
                $opt->removeAttribute('content');

                $options .= $opt->open();
                if(isset($option['content'])){
                    $options .= $option['content'];
                }
                $options .= $opt->close();
            }
        }

        return $options;

    }



    /**
     *
     * @Since 1.1.0
     *
     */
    public static function register()
    {

        add_filter('EF_available_inputs',function($inputs){
            $inputs[self::$_TYPE] = array(
                'type' => self::$_TYPE,
                'label' => __('Select input','easy-form'),
                'class' => self::class
            );

            return $inputs;
        });

    }



    /**
     * @return string
     */
    public function getType()
    {
        return self::$_TYPE;
    }


    /**
     * @param $data
     * @return mixed
     */
    public function getValueFromPostData($data)
    {

        $val = parent::getValueFromPostData($data);

        // If the value selected is other, we return the value of the input
        if($val === 'ef-other') {
            return $data['ef-other-' . $this->getName()];
        }

        return $val;
    }

}